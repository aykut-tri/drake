# Initial state [x, y, theta, knee, ankle]
q_init : [ 0.0, 0.61, 0.3,-0.5, 0.2]
v_init : [ 0.0, 0.0, 0.0, 0.0, 0.0]

# Target state
q_nom_start : [ 0.0, 0.61, 0.3,-0.5, 0.2]
q_nom_end :   [ 0.5, 0.61, 0.3,-0.5, 0.2]

# Initial guess. The initial sequence of generalized positions is generated by
# linearly iterpolating between q_init and q_guess.
q_guess :   [ 0.0, 0.61, 0.3,-0.5, 0.2]

# Cost Weights
Qq : [1e2, 0, 0, 0, 0]      # Running cost
Qv : [1.0, 1.0, 1.0, 1.0, 1.0]

# R : [1e2, 1e3, 1e2, 1e-2, 1e-2] # Effort cost w/o the AL solver
R : [0, 0, 0, 1e-2, 1e-2]

Qfq : [1e4, 1, 1, 10, 10]  # Terminal cost
Qfv : [1.0, 1.0, 1.0, 1.0, 1.0]

# Problem definition parameters
time_step : 0.04   # Discretization timestep (seconds)
num_steps : 50    # number of timesteps

# Solver parameters
max_iters : 500             # maximum Gauss-Newton iterations
method : "trust_region"     # solver method, {linesearch, trust_region}
# Relaxed convergance tolerances for the augmented Lagrangian solver
tolerances:
  rel_cost_reduction: 1e-3
  abs_cost_reduction: 1e-6

# Augmented Lagrangian (AL) solver parameters
augmented_lagrangian: true  # enable/disable the AL solver
update_init_guess: true     # use the Gauss-Newton solution as the initial guess
max_major_iterations: 5     # the maximum number of AL iterations
lambda0: 0.0                # the initial Lagrange multiplier value
mu0: 1e2                    # the initial penalty parameter value
mu_expand_coef: 1e1         # the expansion multiplier for the penalty parameter
constraint_tol: 1e-2        # constraint satisfaction tolerance on the infinity norm

# Method used to compute gradients of inverse dynamics, one of
# {forward_differences, central_differences, central_differences4, autodiff}
gradients_method: "central_differences"

linear_solver: "pentadiagonal_lu"
#linear_solver: "dense_ldlt"
#linear_solver: "petsc"

petsc_rel_tolerance: 1.0e-6

# {cg, direct, minres}
petsc_solver: minres

# none, chol, ichol
petsc_preconditioner: ichol

# Playback/visualization parameters
play_target_trajectory : true
play_initial_guess : true
play_optimal_trajectory : true

# Debugging parameters
linesearch_plot_every_iteration : false
print_debug_data : false
save_solver_stats_csv : true

# Contact model parameters
F : 10.0         # force at delta meters of penetration
delta : 0.01    # penetration distance with F newtons of normal force
stiffness_exponent : 1.0      # Compliant law exponent.
dissipation_exponent : 1.0   # Hunt & Crossley-like model. Law exponent.
dissipation_velocity : 0.1  # Hunt & Crossley-like model parameter, in m/s.

# Force at a distance parameters. If force at a distance is enabled,
# we still use F and delta to determine compliance, but assume
# stiffness_exponent = 1 and smooth out the contact forces according
# to the given factor (lower is smoother).
force_at_a_distance : true
smoothing_factor : 500

# Friction
friction_coefficient : 0.5  # Coefficient of friction.
stiction_velocity: 0.1     # Regularization velocity, in m/s.
