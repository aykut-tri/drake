##
#
# This file contains parameters defining the 2-DOF ball optimization problem,
# where a 2-DOF planar arm playing with a ball.
#
##

# Initial state
q_init : [0.0, 0.0,             # arm
          1.0, 0.0, 0.0, 0.0,   # ball orientation
          0.25, -1.7, 0.0]      # ball position
v_init : [0.0, 0.0,
          0.0, 0.0, 0.0,
          0.0, 0.0, 0.0]

# Target state
q_nom_start : [0.0, 0.0,
               1.0, 0.0, 0.0, 0.0,
               0.25, -1.7, 0.0]
q_nom_end : [0.0, 0.0,
             1.0, 0.0, 0.0, 0.0,
             -0.25, -1.7, 0.0]

# Initial guess. The initial sequence of generalized positions is generated by
# linearly iterpolating between q_init and q_guess.
q_guess : [0.0, 0.0,            # matching q_nom_end
           1.0, 0.0, 0.0, 0.0,
           0.25, -1.7, 0.0]

# Cost Weights
Qq : [0, 0,
      1e-12, 1e-12, 1e-12, 1e-12,
      1e-12, 1e-12, 1e-12]
Qv : [1e-12, 1e-12,
      1e-12, 1e-12, 1e-12,
      1e-12, 1e-12, 1e-12]
R : [1e3, 1e3,
     1e3, 1e3, 1e3,
     1e3, 1e3, 1e3]

Qfq : [0, 0,
       1e-12, 1e-12, 1e-12, 1e-12,
       1e-12, 1e-12, 1e-12]
Qfv : [0, 0,
       1e-12, 1e-12, 1e-12,
       1e-12, 1e-12, 1e-12]

# Problem definition parameters
time_step : 0.05    # Discretization timestep (seconds)
num_steps : 40      # number of timesteps

# Solver parameters
max_iters : 500            # maximum Gauss-Newton iterations
method : "trust_region"     # solver method, {linesearch, trust_region}

tolerances:
  rel_cost_reduction: 1e-6
  abs_cost_reduction: 1e-12
  rel_gradient_along_dq: 1e-12
  abs_gradient_along_dq: 1e-18
  rel_state_change: 1e-6
  abs_state_change: 1e-12

# Augmented Lagrangian (AL) solver parameters
# To get back to the version w/o the AL solver, please (i) toggle the R matrices above,
# (ii) comment out the relaxed convergance tolerances, and (iii) disable the
# `augmented_lagrangian` parameter below.
augmented_lagrangian: false  # enable/disable the AL solver
update_init_guess: true     # use the Gauss-Newton (GN) solution as the initial guess
relax_gn_conv_tol: false     # use pre-determined convergance tolerances for GN
max_major_iterations: 1     # the maximum number of AL iterations
lambda0: 0.0                # the initial Lagrange multiplier value
mu0: 1e3                    # the initial penalty parameter value
mu_expand_coef: 1.5         # the expansion multiplier for the penalty parameter
constraint_tol: 1e-2        # constraint satisfaction tolerance on the infinity norm

# Method used to compute gradients of inverse dynamics, one of
# {forward_differences, central_differences, central_differences4, autodiff}
gradients_method: "central_differences"

# Playback/visualization parameters
play_target_trajectory : true
play_initial_guess : true
play_optimal_trajectory : true

# Debugging parameters
linesearch_plot_every_iteration : false
print_debug_data : false
save_solver_stats_csv : true

# Contact model parameters
F : 1.0       # force at delta meters of penetration
delta : 0.01  # penetration distance with F newtons of normal force
stiffness_exponent : 1      # Compliant law exponent.
dissipation_exponent : 1.0  # Hunt & Crossley-like model. Law exponent.
dissipation_velocity : 0.5  # Hunt & Crossley-like model parameter, in m/s.

# Force at a distance parameters. If force at a distance is enabled,
# we still use F and delta to determine compliance, but assume
# stiffness_exponent = 1 and smooth out the contact forces according
# to the given factor (lower is smoother).
force_at_a_distance : true
smoothing_factor : 100

# Friction
friction_coefficient : 0  # Coefficient of friction.
stiction_velocity: 0.05     # Regularization velocity, in m/s.
